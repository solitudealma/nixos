# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];
  boot = {
    kernelPackages = pkgs.linuxPackagesFor (pkgs.linux_6_7.override {
      argsOverride = rec {
        src = pkgs.fetchurl {
          url = "mirror://kernel/linux/kernel/v6.x/linux-${version}.tar.xz";
          sha256 = "w03kG6opxHXAg06IoxceJV/4bNMtg8a//Ct5fmC/pnE=";
        };
        version = "6.7.2";
        modDirVersion = "6.7.2";
      };
    });
    loader = {
      systemd-boot.enable = true;
      efi = {
        canTouchEfiVariables = true;
        efiSysMountPoint = "/boot";
      };
      grub = {
        theme = pkgs.stdenv.mkDerivation {
          pname = "distro-grub-theme";
          version = "v3.2";
          src = builtins.fetchurl {
            url = "https://github.com/AdisonCavani/distro-grub-themes/releases/download/v3.2/nixos.tar";
            sha256 = "sha256-oW5DxujStieO0JsFI0BBl+4Xk9xe+8eNclkq6IGlIBY=";
          };
          installPhase = "
            runHook preInsta

            mkdir -p $out/
            tar -xf $src --directory $out

            runHook postInstall
          ";
        };
      };
    };
    initrd = {
      enable = true;
      availableKernelModules = ["xhci_pci" "ahci" "sd_mod" "rtsx_pci_sdmmc"];
      kernelModules = [
        "kvm-intel"
      ];
      luks.devices = {
        #luksroot = {
        #  device = "/dev/disk/by-uuid/0fe72388-7f89-44f2-89c8-e50291c6a183";
        #  preLVM = true;
        #};
      };
    };

    kernelModules = ["kvm-intel"];
    extraModulePackages = [];
    binfmt.emulatedSystems = ["aarch64-linux"];
    extraModprobeConfig = ''
    '';
  };
  environment.variables = {
    VDPAU_DRIVER = lib.mkIf config.hardware.opengl.enable (lib.mkDefault "va_gl");
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/ecd1c3a6-6c4d-47f1-a34a-7bb80daabc29";
    fsType = "btrfs";
    options = ["subvol=root"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/ecd1c3a6-6c4d-47f1-a34a-7bb80daabc29";
    fsType = "btrfs";
    options = ["subvol=nix"];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/ecd1c3a6-6c4d-47f1-a34a-7bb80daabc29";
    fsType = "btrfs";
    options = ["subvol=home"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/60D9-56A3";
    fsType = "vfat";
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/357357eb-55ac-48b6-9b3e-3b1fd5f44e52";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware = {
    enableRedistributableFirmware = true;
    cpu.intel.updateMicrocode = true;
    opengl.extraPackages = with pkgs; [
      (
        if (lib.versionOlder (lib.versions.majorMinor lib.version) "23.11")
        then vaapiIntel
        else intel-vaapi-driver
      )
      libvdpau-va-gl
      intel-media-driver
    ];
  };
  services.fstrim.enable = lib.mkDefault true;
}
